From 77bc85fc46076aa76ee6e6bc830ef27d714c5ded Mon Sep 17 00:00:00 2001
From: Nathan Chancellor <nathan@kernel.org>
Date: Fri, 20 May 2022 16:17:36 -0700
Subject: [PATCH 12/18] HACK: Revert "driver core: Extend deferred probe
 timeout on driver registration"

This reverts commit 2b28a1a84a0eb3412bad1a2d5cce2bb4addec626.

This breaks booting ARCH=s390 defconfig.

Link: https://lore.kernel.org/YogkhvFGVcjNQ21Z@dev-arch.thelio-3990X/
Signed-off-by: Nathan Chancellor <nathan@kernel.org>
---
 .../admin-guide/kernel-parameters.txt         |  6 ++----
 drivers/base/base.h                           |  1 -
 drivers/base/dd.c                             | 19 -------------------
 drivers/base/driver.c                         |  1 -
 4 files changed, 2 insertions(+), 25 deletions(-)

diff --git a/Documentation/admin-guide/kernel-parameters.txt b/Documentation/admin-guide/kernel-parameters.txt
index ee322ea0c174..99ef12f1b960 100644
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@ -979,10 +979,8 @@
 			[KNL] Debugging option to set a timeout in seconds for
 			deferred probe to give up waiting on dependencies to
 			probe. Only specific dependencies (subsystems or
-			drivers) that have opted in will be ignored. A timeout
-			of 0 will timeout at the end of initcalls. If the time
-			out hasn't expired, it'll be restarted by each
-			successful driver registration. This option will also
+			drivers) that have opted in will be ignored. A timeout of 0
+			will timeout at the end of initcalls. This option will also
 			dump out devices still on the deferred probe list after
 			retrying.
 
diff --git a/drivers/base/base.h b/drivers/base/base.h
index ab71403d102f..2882af26392a 100644
--- a/drivers/base/base.h
+++ b/drivers/base/base.h
@@ -159,7 +159,6 @@ extern char *make_class_name(const char *name, struct kobject *kobj);
 extern int devres_release_all(struct device *dev);
 extern void device_block_probing(void);
 extern void device_unblock_probing(void);
-extern void deferred_probe_extend_timeout(void);
 
 /* /sys/devices directory */
 extern struct kset *devices_kset;
diff --git a/drivers/base/dd.c b/drivers/base/dd.c
index 5443b09eef8b..295f5807cb8b 100644
--- a/drivers/base/dd.c
+++ b/drivers/base/dd.c
@@ -256,12 +256,7 @@ static int deferred_devs_show(struct seq_file *s, void *data)
 }
 DEFINE_SHOW_ATTRIBUTE(deferred_devs);
 
-#ifdef CONFIG_MODULES
-int driver_deferred_probe_timeout = 10;
-#else
 int driver_deferred_probe_timeout;
-#endif
-
 EXPORT_SYMBOL_GPL(driver_deferred_probe_timeout);
 static DECLARE_WAIT_QUEUE_HEAD(probe_timeout_waitqueue);
 
@@ -322,20 +317,6 @@ static void deferred_probe_timeout_work_func(struct work_struct *work)
 }
 static DECLARE_DELAYED_WORK(deferred_probe_timeout_work, deferred_probe_timeout_work_func);
 
-void deferred_probe_extend_timeout(void)
-{
-	/*
-	 * If the work hasn't been queued yet or if the work expired, don't
-	 * start a new one.
-	 */
-	if (cancel_delayed_work(&deferred_probe_timeout_work)) {
-		schedule_delayed_work(&deferred_probe_timeout_work,
-				driver_deferred_probe_timeout * HZ);
-		pr_debug("Extended deferred probe timeout by %d secs\n",
-					driver_deferred_probe_timeout);
-	}
-}
-
 /**
  * deferred_probe_initcall() - Enable probing of deferred devices
  *
diff --git a/drivers/base/driver.c b/drivers/base/driver.c
index 15a75afe6b84..1b9d47b10bd0 100644
--- a/drivers/base/driver.c
+++ b/drivers/base/driver.c
@@ -246,7 +246,6 @@ int driver_register(struct device_driver *drv)
 		return ret;
 	}
 	kobject_uevent(&drv->p->kobj, KOBJ_ADD);
-	deferred_probe_extend_timeout();
 
 	return ret;
 }
-- 
2.36.1

